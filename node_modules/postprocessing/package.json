{
  "name": "postprocessing",
  "version": "6.19.3",
  "description": "A post processing library that provides the means to implement image filter effects for three.js.",
  "homepage": "https://github.com/vanruesc/postprocessing",
  "main": "build/postprocessing.js",
  "module": "build/postprocessing.esm.js",
  "exports": {
    "import": "./build/postprocessing.esm.js",
    "require": "./build/postprocessing.js"
  },
  "sideEffects": false,
  "license": "Zlib",
  "keywords": [
    "rendering",
    "image",
    "filter",
    "effect",
    "composer",
    "pass",
    "post",
    "processing",
    "gpgpu",
    "rtt",
    "rendertexture",
    "rendertarget",
    "three"
  ],
  "author": {
    "name": "Raoul van RÃ¼schen",
    "email": "vanruesc@outlook.de"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vanruesc/postprocessing.git"
  },
  "bugs": {
    "url": "https://github.com/vanruesc/postprocessing/issues"
  },
  "files": [
    "build"
  ],
  "scripts": {
    "ava": "ava",
    "build": "run-s build:*",
    "build:js": "cross-env NODE_ENV=production ts-node-script esbuild",
    "clean": "del-cli build public tmp",
    "copy": "cpy --cwd=demo/static --parents \"**/*\" \"../../public/demo\"",
    "deploy": "run-s copy lint build doc",
    "dev": "run-s clean copy && run-p start watch",
    "doc": "esdoc",
    "lint": "eslint --ext .js --fix src demo/src",
    "prepublishOnly": "run-s clean test doc",
    "test": "run-s lint build ava",
    "start": "hs -s",
    "watch": "run-p watch:*",
    "watch:eslint": "esw -w --ext .js --color src demo/src",
    "watch:js": "ts-node-script esbuild -w"
  },
  "ava": {
    "failFast": true,
    "files": [
      "test/**/*.js"
    ],
    "require": [
      "esm"
    ]
  },
  "eslintConfig": {
    "root": true,
    "extends": "aether"
  },
  "peerDependencies": {
    "three": ">= 0.102.0 < 0.125.0"
  },
  "devDependencies": {
    "@types/node": "14.x.x",
    "@types/yargs": "15.x.x",
    "ava": "3.x.x",
    "chokidar": "3.x.x",
    "cpy-cli": "3.x.x",
    "cross-env": "7.x.x",
    "dat.gui": "0.x.x",
    "del-cli": "3.x.x",
    "esbuild": "0.x.x",
    "esbuild-plugin-glsl": "1.x.x",
    "esdoc": "1.x.x",
    "esdoc-importpath-plugin": "1.x.x",
    "esdoc-standard-plugin": "1.x.x",
    "eslint": "7.x.x",
    "eslint-config-aether": "1.x.x",
    "eslint-watch": "7.x.x",
    "esm": "3.x.x",
    "http-server": "0.x.x",
    "npm-run-all": "4.x.x",
    "spatial-controls": "3.x.x",
    "three": "0.x.x",
    "three-demo": "4.x.x",
    "ts-node": "9.x.x",
    "tslib": "2.x.x",
    "typescript": "4.x.x",
    "yargs": "16.x.x"
  },
  "readme": "# Post Processing\r\n\r\n[![CI](https://badgen.net/github/checks/vanruesc/postprocessing/main)](https://github.com/vanruesc/postprocessing/actions)\r\n[![Version](https://badgen.net/npm/v/postprocessing?color=green)](https://www.npmjs.com/package/postprocessing)\r\n[![Peer dependencies](https://badgen.net/david/peer/vanruesc/postprocessing)](https://david-dm.org/vanruesc/postprocessing?type=peer)\r\n[![CDN](https://badgen.net/jsdelivr/hits/npm/postprocessing)](https://www.jsdelivr.com/package/npm/postprocessing)\r\n\r\nA post processing library that provides the means to implement image filter effects for [three.js](https://threejs.org/).\r\n\r\n*[Demo](https://vanruesc.github.io/postprocessing/public/demo)&ensp;&middot;&ensp;[Sandbox](https://codesandbox.io/s/postprocessing-25rts)&ensp;&middot;&ensp;[Documentation](https://vanruesc.github.io/postprocessing/public/docs)&ensp;&middot;&ensp;[Wiki](https://github.com/vanruesc/postprocessing/wiki)*\r\n\r\n\r\n## Installation\r\n\r\nThis library requires the peer dependency [three](https://github.com/mrdoob/three.js/).\r\n\r\n```sh\r\nnpm install three postprocessing\r\n```\r\n\r\n\r\n## Usage\r\n\r\nPost processing introduces the concept of passes and effects to extend the common rendering workflow with fullscreen image manipulation tools. The following WebGL attributes should be used for an optimal post processing workflow:\r\n\r\n```js\r\nimport { WebGLRenderer } from \"three\";\r\n\r\nconst renderer = new WebGLRenderer({\r\n\tpowerPreference: \"high-performance\",\r\n\tantialias: false,\r\n\tstencil: false,\r\n\tdepth: false\r\n});\r\n```\r\n\r\nThe [EffectComposer](https://vanruesc.github.io/postprocessing/public/docs/class/src/core/EffectComposer.js~EffectComposer.html) manages and runs passes. It is common practice to use a [RenderPass](https://vanruesc.github.io/postprocessing/public/docs/class/src/passes/RenderPass.js~RenderPass.html) as the first pass to automatically clear the buffers and render a scene for further processing. Fullscreen image effects are rendered via the [EffectPass](https://vanruesc.github.io/postprocessing/public/docs/class/src/passes/EffectPass.js~EffectPass.html). Please refer to the [usage example](https://github.com/mrdoob/three.js/blob/master/README.md) of three.js for more information on how to setup the renderer, scene and camera.\r\n\r\n```js\r\nimport { BloomEffect, EffectComposer, EffectPass, RenderPass } from \"postprocessing\";\r\nimport { Clock } from \"three\";\r\n\r\nconst composer = new EffectComposer(renderer);\r\ncomposer.addPass(new RenderPass(scene, camera));\r\ncomposer.addPass(new EffectPass(camera, new BloomEffect()));\r\n\r\nconst clock = new Clock();\r\n\r\n(function render() {\r\n\r\n\trequestAnimationFrame(render);\r\n\tcomposer.render(clock.getDelta());\r\n\r\n}());\r\n```\r\n\r\n\r\n## Output Encoding\r\n\r\nSimply set `WebGLRenderer.outputEncoding` to the desired target color space and `postprocessing` will follow suit. Built-in passes automatically encode colors when they render to screen and internal render operations are always performed in linear color space. It's [recommended](https://blog.demofox.org/2018/03/10/dont-convert-srgb-u8-to-linear-u8/) to enable high precision frame buffers when using `sRGBEncoding`:\r\n\r\n```js\r\nimport { HalfFloatType } from \"three\";\r\n\r\nconst composer = new EffectComposer(renderer, {\r\n\tframeBufferType: HalfFloatType\r\n});\r\n```\r\n\r\n\r\n## Performance\r\n\r\nThis library provides an [EffectPass](https://vanruesc.github.io/postprocessing/public/docs/class/src/passes/EffectPass.js~EffectPass.html) which automatically organizes and merges any given combination of effects. This minimizes the amount of render operations and makes it possible to combine many effects without the performance penalties of traditional pass chaining. Additionally, every effect can choose its own [blend function](https://vanruesc.github.io/postprocessing/public/docs/variable/index.html#static-variable-BlendFunction).\r\n\r\nAll fullscreen render operations also use a [single triangle](https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes/) that fills the screen. Compared to using a quad, this approach harmonizes with modern GPU rasterization patterns and eliminates unnecessary fragment calculations along the screen diagonal. This is especially beneficial for GPGPU passes and effects that use complex fragment shaders.\r\n\r\n[Performance Test](https://vanruesc.github.io/postprocessing/public/demo/#performance)\r\n\r\n## Included Effects\r\n\r\n_The total demo download size is about `60 MB`._\r\n\r\n - [Antialiasing](https://vanruesc.github.io/postprocessing/public/demo/#antialiasing)\r\n - [Bloom](https://vanruesc.github.io/postprocessing/public/demo/#bloom)\r\n - [Blur](https://vanruesc.github.io/postprocessing/public/demo/#blur)\r\n - [Color Depth](https://vanruesc.github.io/postprocessing/public/demo/#color-depth)\r\n - [Color Grading](https://vanruesc.github.io/postprocessing/public/demo/#color-grading)\r\n   - Color Average\r\n   - Sepia\r\n   - Brightness & Contrast\r\n   - Hue & Saturation\r\n   - LUT\r\n - [Depth of Field](https://vanruesc.github.io/postprocessing/public/demo/#depth-of-field)\r\n   - Vignette\r\n - [Glitch](https://vanruesc.github.io/postprocessing/public/demo/#glitch)\r\n   - Chromatic Aberration\r\n   - Noise\r\n - [God Rays](https://vanruesc.github.io/postprocessing/public/demo/#god-rays)\r\n - [Pattern](https://vanruesc.github.io/postprocessing/public/demo/#pattern)\r\n   - Dot-Screen\r\n   - Grid\r\n   - Scanline\r\n - [Pixelation](https://vanruesc.github.io/postprocessing/public/demo/#pixelation)\r\n - [Outline](https://vanruesc.github.io/postprocessing/public/demo/#outline)\r\n - [Shock Wave](https://vanruesc.github.io/postprocessing/public/demo/#shock-wave)\r\n - [SSAO](https://vanruesc.github.io/postprocessing/public/demo/#ssao)\r\n - [Texture](https://vanruesc.github.io/postprocessing/public/demo/#texture)\r\n - [Tone Mapping](https://vanruesc.github.io/postprocessing/public/demo/#tone-mapping)\r\n\r\n\r\n## Custom Effects\r\n\r\nIf you want to learn how to create custom effects or passes, please check the [Wiki](https://github.com/vanruesc/postprocessing/wiki).\r\n\r\n\r\n## Contributing\r\n\r\nPlease refer to the [contribution guidelines](https://github.com/vanruesc/postprocessing/blob/master/.github/CONTRIBUTING.md) for details.\r\n\r\n\r\n## License\r\n\r\nThis library is licensed under the [Zlib license](https://github.com/vanruesc/postprocessing/blob/master/LICENSE.md).\r\n\r\nThe original code that this library is based on, was written by [mrdoob](https://mrdoob.com) and the [three.js contributors](https://github.com/mrdoob/three.js/graphs/contributors) and is licensed under the [MIT license](https://github.com/mrdoob/three.js/blob/master/LICENSE).\r\n",
  "readmeFilename": "README.md",
  "_id": "postprocessing@6.19.3",
  "dist": {
    "shasum": "60b0483ce340faa687e826441b40ac40d5d16234"
  },
  "_from": "postprocessing@",
  "_resolved": "https://registry.npmjs.org/postprocessing/-/postprocessing-6.19.3.tgz"
}
